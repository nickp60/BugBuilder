# -*- coding: utf-8 -*-
"""
Created on Tue Aug 30 08:57:31 2016
@author: nicholas
"""
import time
import sys
import logging
import os
import unittest
import shutil
import BugBuilder.BugBuilder as bb
import statistics

from .context import BugBuilder
from BugBuilder import run_ragout as rr
from argparse import Namespace
logger = logging


@unittest.skipIf((sys.version_info[0] != 3) or (sys.version_info[1] < 5),
                 "Subprocess.call among other things wont run if tried " +
                 " with less than python 3.5")
class test_run_ragout(unittest.TestCase):
    """
    """
    def setUp(self):
        self.ref_dir = os.path.join(os.path.dirname(__file__), "references")
        self.test_dir = os.path.join(os.path.dirname(__file__), "ragout_tests")
        # self.empty_config = os.path.join(self.ref_dir, "empty_config.yaml")
        # self.filled_config = os.path.join(self.ref_dir, "semicomplete_config.yaml")
        # self.ref_fasta = os.path.join(self.ref_dir, "AP017923.1.fasta")
        # self.renaming_fq = os.path.join(self.ref_dir, "needs_renaming.fq")
        # self.renamed = os.path.join(self.ref_dir, "renamed_ref.fq")
        # self.fastq1 = os.path.join(self.ref_dir, "AP017923.1_reads1.fq")
        # self.fastq2 = os.path.join(self.ref_dir, "AP017923.1_reads2.fq")
        # self.args = Namespace()
        # os.makedirs(self.test_dir, exist_ok=True)
        self.startTime = time.time() # for timing
        self.to_be_removed = []


    def test_make_ragout_recipe(self):
        lines = rr.make_ragout_recipe(
            references=["path/to/seq1.fasta","path/to/seq2.fa"],
            target="path/to/contigs.fa")
        ref =  [
            "# ragout recipe file generated by BugBuilder",
            ".references = seq1,seq2",
            ".target = contigs",
            "contigs.fa = path/to/contigs.fa",
            "seq1.fasta = path/to/seq1.fasta",
            "seq2.fa = path/to/seq2.fa"
            ]

        for i, line in enumerate(lines):
            self.assertEqual(line, ref[i])

    def test_make_ragout_cmd(self):
        self.assertEqual(
            rr.make_ragout_cmd(
                exe="raggyraggy", scaff_dir="./test/",
                threads=7, ragout_recipe="./path/to/recipe.txt"),
            "raggyraggy --outdir ./test/ --synteny sibelia --threads 7 " +
            "./path/to/recipe.txt --debug"
        )

    def tearDown(self):
        """ delete temp files if no errors, and report elapsed time
        """
        for filename in self.to_be_removed:
            try:
                os.unlink(filename)
            except Exception as e: # could be IsADirectpry or PErmissionsError
                print (e)
                shutil.rmtree(filename)
        t = time.time() - self.startTime
        print("%s: %.3f" % (self.id(), t))


if __name__ == '__main__':
    unittest.main()
